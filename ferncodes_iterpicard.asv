function [p,flowrate,flowresult,flowratedif,dt_aux]=ferncodes_iterpicard(M_old,RHS_old,...
    parameter,w,s,h_kickoff,nflagno,wells,viscosity,Con,nflagc,wightc,sc,...
    dparameter,contnorm,SS,dt,h,MM,gravrate,source,kmap,nflagface,N,...
    theta_s,theta_r,alpha,pp,q,Kde,Ded,Kn,Kt,Hesq,iterinicial,...
    gravresult,flowrateZ,flowresultZ)
global nltol maxiter  pmethod elem interptype numcase centelem keygravity kmapaux
%% calculo do residuo Inicial
R0=norm(M_old*h_kickoff-RHS_old);
h_old=h;
%% inicializando dados para iteração Picard
step=0;
er=1;
dt_aux=0;
pinterp_new=0;
while (nltol<er || nltol==er) && (step<maxiter)
    % atualiza iterações
    step=step+1;

    % calculo das pressões
    % [L,U] = ilu(M_old,struct('type','ilutp','droptol',1e-8));
     
    %  [p_new,]=gmres(M_old,RHS_old,10,1e-9,1000,L,U);

    p_new = solver(M_old,RHS_old);
    if strcmp(pmethod,'mpfad') 
          kmap = PLUG_kfunction(kmap,p_new,MM,theta_s,theta_r,alpha,...
                                 pp,q,iterinicial);
        % [Hesq,Kde,Kn,Kt,Ded] = ferncodes_Kde_Ded_Kt_Kn(kmap, elem,...
        %                        theta_r,theta_s,pp,alpha,q);
          if strcmp(keygravity,'y')
              [flowrateZ,flowresultZ]=Zcontribution(kmap,theta_s,...
                                                 theta_r,alpha,pp,q);
          end
        %  %             It switches according to "interptype"
        %  switch char(interptype)
        %     %LPEW 1
        %     case 'lpew1'
        %         % calculo dos pesos que correspondem ao LPEW1
        %         [w,s] = ferncodes_Pre_LPEW_1(kmap,N);
        %         %LPEW 2
        %     case 'lpew2'
        %         % calculo dos pesos que correspondem ao LPEW2
        %         [w,s] = ferncodes_Pre_LPEW_2(kmap,N,zeros(size(elem,1),1),...
        %             nflagface,nflagno);
        % end  %End of SWITCH
        % if numcase==432 
        %     if 7 <step
        %         dt=0.7*dt;
        %     elseif  3<= step && step<= 7
        %         dt=1*dt;
        %     elseif step <7
        %         dt=1.3*dt;
        %     end
        % end
        % Montagem da matriz global
        [M,I,] = ferncodes_globalmatrix(w,s,Kde,Ded,Kn,Kt,Hesq,...
            viscosity,nflagno,nflagface,SS,dt,h ,MM,gravrate,theta_s,...
            theta_r,alpha,pp,q,p_new,iterinicial,gravresult,flowresultZ);
        %------------------------------------------------------------------
        %Add a source therm to independent vector "mvector"
        %Often it may change the global matrix "M" with wells
        [M_new,I] = addsource(sparse(M),I,wells);

        % Often with source term
        [RHS_new]=sourceterm(I,source);
    else
        %% plotagem no visit
        %S=ones(size(p_new,1),1);
        %ferncodes_postprocessor(p_new,S,step)
        [pinterp_new,]=ferncodes_pressureinterpNLFVPP(p_new,nflagno,w,s,Con,...
            nflagc,wightc,sc);
        %% Calculo da matriz global

        [M,I]=ferncodes_assemblematrixNLFVPP(pinterp_new,parameter,viscosity,...
            contnorm,SS,dt,h,MM,gravrate,nflagno);
        %--------------------------------------------------------------------------
        %Often it may change the global matrix "M"
        [M_new,RHS_new] = addsource(sparse(M),I,wells);
        % Often with source term
        [RHS_new]=sourceterm(RHS_new,source);
    end
    %% Calculo do residuo

    R = norm(M_new*p_new - RHS_new);

    if (R0 ~= 0.0)
        er = abs(R/R0);
    else
        er = 0.0; %exact
    end
    errorelativo(step)=er;

    % atualizar
    M_old=M_new;
    RHS_old=RHS_new;

end
dt_aux=dt;
%--------------------------------------------------------------------------
%Solve global algebric system
if numcase==331
    [M,I]=ferncodes_implicitandcranknicolson(M_old,RHS_old,SS,dt,MM,h,...
        theta_s,theta_r,alpha,pp,q);
    % calculo das pressões
    p = solver(M,I);
else
    p=p_new;
end

%Message to user:
fprintf('\n Iteration number, iterations = %d \n',step)
fprintf('\n Residual error, error = %d \n',er)
%Message to user:
disp('>> The Pressure field was calculated with success!');
if strcmp(pmethod,'nlfvpp')
    [pinterp,cinterp]=ferncodes_pressureinterpNLFVPP(p,nflagno,w,s,Con,...
        nflagc,wightc,sc);
    %Get the flow rate (Diamond)
    [flowrate,flowresult,flowratedif]=ferncodes_flowrateNLFVPP(p, pinterp,...
        parameter,viscosity,Con,nflagc,wightc,sc,dparameter,cinterp,gravrate);
else
    wc=0;Kdec=0;Knc=0;Ktc=0;Dedc=0;
    % auxiliary variables interpolation
    [pinterp,cinterp]=ferncodes_pressureinterpNLFVPP(p,nflagno,w,s,Con,nflagc,wc,sc);
    %Get the flow rate (Diamond)
    [flowrate,flowresult,flowratedif] = ...
        ferncodes_flowrate(p,pinterp,cinterp,Kde,...
        Ded,Kn,Kt,Hesq,viscosity,nflagno,Con,Kdec,Knc,Ktc,...
        Dedc,nflagc,gravrate,flowrateZ);

end
%Message to user:
disp('>> The Flow Rate field was calculated with success!');

end